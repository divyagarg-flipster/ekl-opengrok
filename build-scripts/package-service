#!/bin/bash
#set -x
### BEGIN INIT INFO
# Provides:          ekl-opengrok
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop EKL OpenGrok Server
### END INIT INFO

function log() {
   echo "[INFO]: $(date)": "$1" | tee -a "${LOGFILE}"
}

function initialize() {
  export PACKAGE="ekl-opengrok"
  export LOGFILE="/var/log/flipkart/supply-chain/${PACKAGE}/${PACKAGE}.log"
  export SLEEP_TIME_FOR_STOP=${STOP_SLEEP_TIME:-10}
  export SLEEP_TIME_FOR_START=${START_SLEEP_TIME:-5}
  export MIN_JAVA_VERSION=1.8
  export JAVA_HOME="/usr/lib/jvm/jdk-8-oracle-x64/jre/"
  export OPENGROK_PATH="/var/lib/${PACKAGE}"
  export REPOSITORY_PATH="${OPENGROK_PATH}/repositories/src_root"
  export SERVICE_STOP_FILE="${OPENGROK_PATH}/stop_service.txt"
  export USERNAME="fk-supply-chain"
  source "/etc/default/${PACKAGE}"
  touch "${LOGFILE}"
}

function verify_java() {
  log "Verifying java version"
  JAVA_EXEC=$(command -v java)
  if [ -z "${JAVA_EXEC}" ]; then
    log "Java not found in the system. Service can not start."
    exit 1
  else
    log "Found java executable at ${JAVA_EXEC}"
    java_version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
    if [[ "${java_version}" < "${MIN_JAVA_VERSION}" ]]; then
      log "Existing java version ${java_version} does not meet the min version: ${MIN_JAVA_VERSION}"
      log "Service can not start"
      exit 1
    else         
      log "Existing java version ${java_version} meets the min version: ${MIN_JAVA_VERSION}"
    fi
  fi
}

take_oor() {
    log "Taking ${PACKAGE} Out-Of-Rotation..."
    cd /usr/share/tomcat8/bin
    ./catalina.sh stop >> "${LOGFILE}" 2>&1 &
    log "OOR operation success"

}

make_bir()  {
  log "Taking ${PACKAGE} Back-In-Rotation..."
  log "BIR operation success"
}

check_process() {
  set +e
  pgrep -u "tomcat8"
  set -e
}

check_status() {
  log "In check_status"
  PID=$(check_process)
  if [ -z "${PID}" ]; then
    log "${PACKAGE} is not running."
    echo "${PACKAGE} is not running."
  else
    log "${PACKAGE} is running at ${PID}"
    echo "${PACKAGE} is running at ${PID}"
  fi
}

restart_service() {
  stop_service
  start_service
}

unpack_opengrok() {

   if [ ! -d "${OPENGROK_PATH}/opengrok-0.12.1" ]; then
    # Control will enter here if OPENGROK_PATH doesn't exist.
       mkdir -p ${OPENGROK_PATH}
       cd ${OPENGROK_PATH}
       tar xzf opengrok-0.12.1.tar.gz
       cd -
    fi

}


check_cronjob_status() {
set +e
pgrep -f "cron"
set -e

}
cron_job() {

    echo "${SUDO_USER:-$USER}"
    log "Registering crontab"
    cd ${OPENGROK_PATH}
    chmod 666 ${LOGFILE}
    chmod 777 crontab.sh
    chmod 777 ${REPOSITORY_PATH}
    chmod -R 777 /var/lib/ekl-opengrok/opengrok-0.12.1
    export PATH="/sbin:$PATH"
    echo "Stopping cron job"
    /etc/init.d/cron stop
    CRON_ID=$(check_cronjob_status)
    if [ ! -z "${CRON_ID}" ]; then
        log "cronjob is running with PID ${CRON_ID}."
        pkill -f -9 "cron"
    fi
    echo "Removing existing entries from crontab"
    sudo crontab -u ${USERNAME} -r
    echo "Adding crontab"
#    (sudo crontab -u ${USERNAME} -l; echo "0 */2 * * * ${OPENGROK_PATH}/crontab.sh") | sudo crontab -u ${USERNAME} -
    (sudo crontab -u ${USERNAME} -l; echo "*/10 * * * * ${OPENGROK_PATH}/crontab.sh") | sudo crontab -u ${USERNAME} -
    echo "Listing crontab"
    sudo crontab -u ${USERNAME} -l
    echo "Starting cron job"
    /etc/init.d/cron start
    echo "Started Cron Job"
    cd -

}

start_service() {
  log "In start_service"
  PID=$(check_process)
    stop_service
  if [ -z "$PID" ]; then
    log "Starting service ${PACKAGE}"
    verify_java
    cron_job

    ulimit -n 30000

     if [ ! -d "/usr/share/tomcat8/logs" ]; then
            echo 'Making directory for tomcat logs'
             mkdir -p /usr/share/tomcat8/logs
        fi

        chmod 777 /usr/share/tomcat8/logs

        sudo /etc/init.d/tomcat8  start

    log "Unpacking opengrok"
    unpack_opengrok
    log "Sleeping for ${SLEEP_TIME_FOR_START} seconds to wait for server to start"
    sleep "${SLEEP_TIME_FOR_START}"

    log "Getting server back in rotation"
    make_bir
  else
    log "Process is already running at PID $PID"
  fi
}

db_migrate()    {
  log "db_migrate not yet implemented"
}

stop_service()  {
  take_oor
  PID=$(check_process)
  if [ -z "${PID}" ]; then
    log "Process is already stopped"
  else
    log "Sleeping for ${SLEEP_TIME_FOR_STOP} seconds for incoming requests to finish"
    sleep "${SLEEP_TIME_FOR_STOP}"

    echo 'Stopping tomcat'
    sudo /etc/init.d/tomcat8  stop

    PID=$(check_process)
    if [! -z "${PID}" ]; then
        log "Process still running at pid ${PID}. Force killing process"
        kill -9 ${PID}
    fi
    if [ -z "${PID}" ]; then
        log "Successfully stopped service ${PID}"
        else
        log "Not stoopned ${PID}"
    fi
  fi
}


function main() {
  initialize

  case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    import_keytool)
        keytool --import -keystore /usr/lib/jvm/java-6-sun/jre/lib/security/cacerts -file "$2" -alias "$3"
        ;;
    migrate_db)
        db_migrate
        ;;
    OOR)
        take_oor
        ;;
    BIR)
        make_bir
        ;;
    status)
        check_status
        ;;
    restart)
        restart_service
        ;;
    *)
        echo "USAGE: $0 restart|start|stop|OOR|BIR|migrate_db|status"
        exit 3
        ;;
  esac
}

main "$@"